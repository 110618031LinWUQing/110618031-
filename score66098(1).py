# -*- coding: utf-8 -*-
"""score66098.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YyRaviDBhCOTik9PHhAW9gQdi4vsyoBE
"""

from google.colab import drive
drive.mount('/content/gdrive')

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from keras.models import Sequential #Sequential函式
from keras.layers import * #引入層數
from keras.callbacks import *
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import RobustScaler

data_1 = pd.read_csv('/content/gdrive/MyDrive/機器學習/train-v3.csv')
X_train = data_1.drop(['id','zipcode','sale_yr','sale_month','sale_day','price','yr_renovated'],axis = 1)
Y_train = data_1['price'].values

data_2 = pd.read_csv('/content/gdrive/MyDrive/機器學習/valid-v3.csv')
print(type(data_2))
X_valid = data_2.drop(['id','zipcode','sale_yr','sale_month','sale_day','price','yr_renovated'],axis = 1)
Y_valid = data_2['price'].values

data_3 = pd.read_csv('/content/gdrive/MyDrive/機器學習/test-v3.csv')
X_test = data_3.drop(['id','zipcode','sale_yr','sale_month','sale_day','yr_renovated'],axis = 1)
print(type(X_test))

#sns.histplot(data = data_1, x = data_1['zipcode'].values, y = data_1['price'].values)
#sns.pairplot(X_train)

scaler = RobustScaler().fit(X_train)
X_train = scaler.transform(X_train)
X_valid = scaler.transform(X_valid)
X_test = scaler.fit_transform(X_test)
print(type(X_test))

model = Sequential()
model.add(Dense(128,input_dim = 16,kernel_initializer = 'RandomNormal',activation = 'relu'))
model.add(Dense(200,kernel_initializer = 'RandomNormal',activation = 'relu'))
tf.keras.layers.Dropout(0.2)
model.add(Dense(300,kernel_initializer = 'RandomNormal',activation = 'relu'))
tf.keras.layers.Dropout(0.2)
model.add(Dense(150,kernel_initializer = 'RandomNormal',activation = 'relu'))
tf.keras.layers.Dropout(0.2)
model.add(Dense(1,kernel_initializer = 'RandomNormal',activation = 'relu'))

model.compile(loss = 'MAE',optimizer = 'adam')
epochs = 400
batch_size = 128

model.summary()

history = model.fit(X_train,Y_train,batch_size = batch_size,epochs = epochs,verbose = 1,
          validation_data = (X_valid,Y_valid))

plt.plot(history.history['loss'],'r')
plt.plot(history.history['val_loss'],'g')

model.save('my_model.h5')

predict_price=model.predict(X_test)
f=open('house_price.csv','w')
f.write('id,price\n')
for i in range(len(predict_price)):
  f.write(str(i+1)+','+str(float(predict_price[i]))+'\n')
f.close()